########################################################################################################
## Lynx - top
########################################################################################################
set project         "${CMAKE_PROJECT_NAME}"
set part            "${FPGA_PART}"
#set board_part     "${FPGA_BOARD}"

########################################################################################################
# Source files
########################################################################################################
set root_dir        "${CMAKE_SOURCE_DIR}"
set build_dir       "${CMAKE_BINARY_DIR}"
set scripts_dir     "$root_dir/scripts"
set hw_dir          "$root_dir"
set ip_dir          "$root_dir/ip"
set iprepo_dir      "$build_dir/iprepo" 

set device_ip_dir   "$ip_dir/dev"
file mkdir $device_ip_dir

########################################################################################################
# Config
########################################################################################################
set cfg(fdev)       ${FDEV_NAME}

set cfg(n_reg)      ${N_REGIONS}

set cfg(en_strm)    ${EN_STRM}
set cfg(en_ddr)     ${EN_DDR}
set cfg(en_pr)      ${EN_PR}

set cfg(n_chan)     [expr {$cfg(en_strm) + $cfg(en_ddr) + $cfg(en_pr)}]
set cfg(n_ddr_chan) ${N_DDR_CHAN}

set cfg(en_bpss)    ${EN_BPSS}
set cfg(en_avx)     ${EN_AVX}

set cfg(qsfp)       ${QSFP_PORT}

set cfg(ddr_0)      0
set cfg(ddr_1)      0
set cfg(ddr_2)      0
set cfg(ddr_3)      0 

if {$cfg(n_ddr_chan) >= 1} {
    set cfg(ddr_0)      1
}
if {$cfg(n_ddr_chan) >= 2} {
    set cfg(ddr_1)      1
}
if {$cfg(n_ddr_chan) >= 4} {
    set cfg(ddr_2)      1
    set cfg(ddr_3)      1
}

set cfg(en_fv)      ${EN_FV}
set cfg(en_fvv)     ${EN_FVV}
set cfg(en_tcp)     ${EN_TCP}

set nn 0
if {$cfg(en_strm) eq 1} {
    set cfg(strm_chan)  $nn
    incr nn
}
if {$cfg(en_ddr) eq 1} {
    set cfg(ddr_chan)  $nn
    incr nn
}
if {$cfg(en_pr) eq 1} {
    set cfg(pr_chan)  $nn
    incr nn
}
 
########################################################################################################
# Project
########################################################################################################
set proj_dir        "$build_dir/$project"

# Check iprepo
if { [file isdirectory $iprepo_dir] } {
	set lib_dir "$iprepo_dir"
} else {
	puts "iprepo directory could not be found."
	#exit 1
}

# Create project
create_project $project $proj_dir -part $part
set proj [current_project]
set_property IP_REPO_PATHS $lib_dir [current_fileset]
update_ip_catalog

########################################################################################################
# Set project properties
########################################################################################################
#set_property "board_part" $board_part                      $proj
set_property "default_lib" "xil_defaultlib"                 $proj
set_property "ip_cache_permissions" "read write"            $proj
set_property "ip_output_repo" "$proj_dir/$project.cache/ip" $proj
set_property "sim.ip.auto_export_scripts" "1"               $proj
set_property "target_language" "Verilog"                    $proj
set_property "simulator_language" "Mixed"                   $proj
set_property "xpm_libraries" "XPM_CDC XPM_MEMORY"           $proj
if {$cfg(en_pr) eq 1} {
    set_property "pr_flow" "1"                              $proj
}

########################################################################################################
# Create and add source files
########################################################################################################
file mkdir "$proj_dir/hdl/wrappers"
file mkdir "$proj_dir/hdl/wrappers/config_0"
file mkdir "$proj_dir/hdl/config_0"

# Package
source "$scripts_dir/wr_hdl/wr_hdl_pkg.tcl" -notrace
wr_hdl_pkg "$proj_dir/hdl/lynx_pkg.sv"

# Top level
source "$scripts_dir/wr_hdl/wr_hdl_top_$cfg(fdev).tcl" -notrace
wr_hdl_top "$proj_dir/hdl/wrappers/top.sv"

# Dynamic wrapper
source "$scripts_dir/wr_hdl/wr_hdl_dynamic.tcl" -notrace
wr_hdl_dynamic "$proj_dir/hdl/wrappers/dynamic_wrapper.sv" 0

# Init config
source "$scripts_dir/wr_hdl/wr_hdl_user.tcl" -notrace
for {set i 0}  {$i < $cfg(n_reg)} {incr i} {
    wr_hdl_user_wrapper "$proj_dir/hdl/wrappers/config_0/design_user_wrapper_c0_$i.sv" $i
    wr_hdl_user "$proj_dir/hdl/config_0/design_user_logic_c0_$i.sv" $i
}

# Add source files
add_files "$hw_dir/hdl/mmu"
add_files "$hw_dir/hdl/mux"
add_files "$hw_dir/hdl/pkg"
add_files "$hw_dir/hdl/regs"
add_files "$hw_dir/hdl/slave"
add_files "$hw_dir/hdl/util"

if {$cfg(en_ddr) eq 1} {
    #add_files "$hw_dir/hdl/cdma"
    add_files "$hw_dir/hdl/cdma_unaglined"
}

if {$cfg(en_fv) eq 1} {
    add_files "$hw_dir/hdl/network"
}

# Add wrappers and user logic
add_files "$proj_dir/hdl"

# Top level
set_property "top" "top" [current_fileset]

# Constraints
add_files -norecurse -fileset [get_filesets constrs_1] "$hw_dir/constraints/$cfg(fdev)"

# Create a project-local constraint file to take debugging constraints that we
# don't want to propagate to the repository.
file mkdir "$proj_dir/$project.srcs/constrs_1"
close [ open "$proj_dir/$project.srcs/constrs_1/local.xdc" w ]

set_property target_constrs_file "$proj_dir/$project.srcs/constrs_1/local.xdc" [current_fileset -constrset]

########################################################################################################
# IPs
########################################################################################################
source "$scripts_dir/ip_inst/base_infrastructure.tcl" -notrace

########################################################################################################
# RDMA
########################################################################################################
if {$cfg(en_fv) eq 1} {
    add_files $ip_dir/SmartCamCtl.dcp

    source "$scripts_dir/ip_inst/network_infrastructure.tcl"
    source "$scripts_dir/ip_inst/network_ultraplus.tcl"
    source "$scripts_dir/ip_inst/network_stack.tcl"
}

########################################################################################################
# STATIC LAYER
########################################################################################################
source "$scripts_dir/bd/cr_static_$cfg(fdev).tcl" -notrace

cr_bd_design_static ""
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files design_static.bd ]

########################################################################################################
# DYNAMIC LAYER
########################################################################################################
# Create dynamic regions
if {$cfg(en_pr) eq 1} {
    for {set i 0}  {$i < $cfg(n_reg)} {incr i} {
        create_partition_def -name "dynamic_$i" -module "design_user_wrapper_$i"
        create_reconfig_module -name "design_user_wrapper_c0_$i" -partition_def [get_partition_defs "dynamic_$i" ]  -define_from "design_user_wrapper_$i"
        set obj [get_partition_defs "dynamic_$i"]
        set_property -name "name" -value "dynamic_$i" -objects $obj
        set_property -name "use_blackbox_stub" -value "1" -objects $obj
    }  

    set cmd "create_pr_configuration -name config_0 -partitions \[list \ "
        for {set i 0} {$i < $cfg(n_reg)} {incr i} {
            append cmd "inst_dynamic/inst_user_wrapper_$i:design_user_wrapper_c0_$i "
        }
        append cmd "]"
    eval $cmd
    set_property PR_CONFIGURATION config_0 [get_runs impl_1]
    set_property STEPS.WRITE_BITSTREAM.ARGS.BIN_FILE true [get_runs impl_1]
}





