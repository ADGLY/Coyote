#########################################################################################
# Dynamic wrapper
#########################################################################################
proc wr_hdl_dynamic_wrapper {f_out c_reg} {	
	upvar #0 cfg cnfg

	set template {}
	set entity {}
	append entity "`timescale 1ns / 1ps\n"
	append entity "\n"
	append entity "import lynxTypes::*;\n"
	append entity "\n"
	append entity "`include \"axi_macros.svh\"\n"
	append entity "`include \"lynx_macros.svh\"\n"
	append entity "\n"
	append entity "module design_dynamic_wrapper #(\n"
	append entity "    parameter integer                       ID_DYN = 0\n"
	append entity ") (\n"
	append entity "    // Clock and reset\n"
	append entity "    input  logic                            sys_rst,\n"
	append entity "    input  logic                            aresetn,\n"
	append entity "    input  logic                            aclk,\n"
	append entity "\n"
	append entity "    // AXI4 Lite control\n"
	append entity "    AXI4L.s                                 axi_ctrl \[N_REGIONS],\n"
	append entity "    \n"
	if {$cnfg(en_avx) eq 1} {
		append entity "    // AXI4 AVX control\n"
	append entity "    AXI4.s                                  axim_ctrl \[N_REGIONS],\n"
		append entity "    \n"
	}
	if {$cnfg(en_ddr) eq 1} {
		append entity "    // AXI4 DDR \n"
		append entity "    AXI4.m									axi_ddr_in \[N_DDR_CHAN*2],\n"
		append entity "\n"
	}
    if {$cnfg(en_strm) eq 1} {
        append entity "    // AXI4S host\n"
        append entity "    AXI4S.m                                 axis_host_in,\n"
        append entity "    AXI4S.s                                 axis_host_out,\n"
        append entity "    xdmaIntf.m                              host_xdma_req,\n"
        append entity "    \n"
    }
    if {$cnfg(en_ddr) eq 1} {
        append entity "    // AXI4S card\n"
        append entity "    AXI4S.m                                 axis_card_in,\n"
        append entity "    AXI4S.s                                 axis_card_out,\n"
        append entity "    xdmaIntf.m                              card_xdma_req,\n"
        append entity "    \n"
    }
	if {$cnfg(en_fv) eq 1} {
		append entity "    metaIntf.m                              rdma_req_host \[N_REGIONS],\n"
		if {$cnfg(en_fvv) eq 1} {
			append entity "    metaIntf.m                              rdma_req_card \[N_REGIONS],\n"
			append entity "    metaIntf.s                              rdma_req_fv \[N_REGIONS],\n"
		}
		append entity "    reqIntf.s                               rdma_rd_cmd \[N_REGIONS],\n"
		append entity "    reqIntf.s                               rdma_wr_cmd \[N_REGIONS],\n"
		append entity "    AXI4S.m                                 axis_rdma_rd_data \[N_REGIONS],\n"
		append entity "    AXI4S.s                                 axis_rdma_wr_data \[N_REGIONS],\n"
        append entity "    \n"
	}
	if {$cnfg(en_tcp) eq 1} {
		append entity "    metaIntf.s                              tcp_req_in \[N_REGIONS],\n"
		append entity "    metaIntf.m                              tcp_req_out \[N_REGIONS],\n"
	}
	append entity "    // IRQ\n"
	append entity "    output logic\[N_REGIONS-1:0]             usr_irq,\n"
	append entity "\n"
	append entity "    // BSCAN\n"
	append entity "    input  logic                            S_BSCAN_drck,\n"
	append entity "    input  logic                            S_BSCAN_shift,\n"
	append entity "    input  logic                            S_BSCAN_tdi,\n"
	append entity "    input  logic                            S_BSCAN_update,\n"
	append entity "    input  logic                            S_BSCAN_sel,\n"
	append entity "    output logic                            S_BSCAN_tdo,\n"
	append entity "    input  logic                            S_BSCAN_tms,\n"
	append entity "    input  logic                            S_BSCAN_tck,\n"
	append entity "    input  logic                            S_BSCAN_runtest,\n"
	append entity "    input  logic                            S_BSCAN_reset,\n"
	append entity "    input  logic                            S_BSCAN_capture,\n"
	append entity "    input  logic                            S_BSCAN_bscanid_en\n"
	append entity ");\n"
	append entity "\n"
    append entity "// Control lTLB\n"
    append entity "AXI4L axi_ctrl_lTlb \[N_REGIONS] ();\n"
    append entity "\n"
    append entity "// Control sTLB\n"
    append entity "AXI4L axi_ctrl_sTlb \[N_REGIONS] ();\n"
    append entity "\n"
    append entity "// Control config\n"
    append entity "AXI4L axi_ctrl_cnfg \[N_REGIONS] ();\n"
    append entity "\n"
    append entity "// Control user logic\n"
    append entity "AXI4L axi_ctrl_user \[N_REGIONS] ();\n"
    append entity "\n"
	append entity "// Decoupling signals\n"
	append entity "logic \[N_REGIONS-1:0] decouple;\n"
	append entity "\n"
	if {$cnfg(en_strm) eq 1} {
		append entity "// ----------------------------------------------------------------------\n"
		append entity "// HOST \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "// XDMA host sync\n"
		append entity "dmaIntf rdXDMA_host();\n"
		append entity "dmaIntf wrXDMA_host();\n"
		append entity "\n"
		append entity "assign host_xdma_req.h2c_ctl           = {{11{1'b0}}, rdXDMA_host.req.ctl, {2{1'b0}}, {2{rdXDMA_host.req.ctl}}};\n"
		append entity "assign host_xdma_req.h2c_addr          = rdXDMA_host.req.paddr;\n"
		append entity "assign host_xdma_req.h2c_len           = rdXDMA_host.req.len;\n"
		append entity "assign host_xdma_req.h2c_valid         = rdXDMA_host.valid;\n"
		append entity "\n"
		append entity "assign host_xdma_req.c2h_ctl           = {{11{1'b0}}, wrXDMA_host.req.ctl, {2{1'b0}}, {2{wrXDMA_host.req.ctl}}};\n"
		append entity "assign host_xdma_req.c2h_addr          = wrXDMA_host.req.paddr;\n"
		append entity "assign host_xdma_req.c2h_len           = wrXDMA_host.req.len;\n"
		append entity "assign host_xdma_req.c2h_valid         = wrXDMA_host.valid;\n"
		append entity "\n"
		append entity "assign rdXDMA_host.ready               = host_xdma_req.h2c_ready;\n"
		append entity "assign wrXDMA_host.ready               = host_xdma_req.c2h_ready;\n"
		append entity "assign rdXDMA_host.done                = host_xdma_req.h2c_status\[1];\n"
		append entity "assign wrXDMA_host.done                = host_xdma_req.c2h_status\[1];\n"
		append entity "\n"
		append entity "// Slice host 0 \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4S axis_host_s0_in();\n"
		append entity "AXI4S axis_host_s0_out();\n"
		append entity "axis_reg_array #(.N_STAGES(N_REG_HOST_S0)) inst_host_reg_s0_out (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_host_out), .axis_out(axis_host_s0_out));\n"
		append entity "axis_reg_array #(.N_STAGES(N_REG_HOST_S0)) inst_host_reg_s0_in (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_host_s0_in), .axis_out(axis_host_in));\n"
		append entity "\n"
		append entity "// Multiplexing \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4S axis_host_s1_in \[N_REGIONS] ();\n"
		append entity "AXI4S axis_host_s1_out \[N_REGIONS] ();\n"
		if {$cnfg(n_reg) > 1} {
			append entity "muxUserIntf mux_host_rd_user ();\n"
			append entity "muxUserIntf mux_host_wr_user ();\n"
			append entity "axis_mux_user_sink (.aclk(aclk), .aresetn(aresetn), .mux(mux_host_wr_user), .axis_in(axis_host_s1_in), .axis_out(axis_host_s0_in));\n"
			append entity "axis_mux_user_src (.aclk(aclk), .aresetn(aresetn), .mux(mux_host_rd_user), .axis_in(axis_host_s0_out), .axis_out(axis_host_s1_out));\n"
			append entity "\n"
		} else {
			append entity "`AXIS_ASSIGN(axis_host_s0_out, axis_host_s1_out\[0])\n"
			append entity "`AXIS_ASSIGN(axis_host_s1_in\[0], axis_host_s0_in)\n"
			append entity "\n"
		}
		append entity "// Credits \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4SR axis_host_s2_in \[N_REGIONS] ();\n"
		append entity "AXI4SR axis_host_s2_out \[N_REGIONS] ();\n"
		append entity "logic \[N_REGIONS-1:0] rxfer_host;\n"
		append entity "logic \[N_REGIONS-1:0] wxfer_host;\n"
		append entity "logic \[N_REGIONS-1:0]\[3:0] rd_dest_host;\n"
		append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
		append entity "  data_queue_credits_src inst_cred_que_host_out (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_host_s1_out\[i]), .axis_out(axis_host_s2_out\[i]), .rd_dest(rd_dest_host\[i]));\n"
		append entity "  data_queue_credits_sink inst_cred_que_host_in (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_host_s2_in\[i]), .axis_out(axis_host_s1_in\[i]));\n"
		append entity "  assign rxfer_host\[i] = axis_host_s2_out\[i].tvalid & axis_host_s2_out\[i].tready;\n"
		append entity "  assign wxfer_host\[i] = axis_host_s2_in\[i].tvalid & axis_host_s2_in\[i].tready;\n"
		append entity "end\n"
		append entity "\n"
		append entity "// Slice host 1 \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4SR axis_host_s3_in \[N_REGIONS] ();\n"
		append entity "AXI4SR axis_host_s3_out \[N_REGIONS] ();\n"
		append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
		append entity "  axisr_reg_array #(.N_STAGES(N_REG_HOST_S1)) inst_host_reg_s1_out (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_host_s2_out\[i]), .axis_out(axis_host_s3_out\[i]));\n"
		append entity "  axisr_reg_array #(.N_STAGES(N_REG_HOST_S1)) inst_host_reg_s1_in (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_host_s3_in\[i]), .axis_out(axis_host_s2_in\[i]));\n"
		append entity "end\n"
		append entity "\n"
		append entity "// Decoupling \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4SR axis_host_dcpl_in \[N_REGIONS] ();\n"
		append entity "AXI4SR axis_host_dcpl_out \[N_REGIONS] ();\n"
		if {$cnfg(en_pr) eq 1} {
			append entity "axisr_decoupler (.decouple(decouple), .axis_in(axis_host_s3_out), .axis_out(axis_host_dcpl_out));\n"
			append entity "axisr_decoupler (.decouple(decouple), .axis_in(axis_host_dcpl_in), .axis_out(axis_host_s3_in));\n"
		} else {
			append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
			append entity "  `AXISR_ASSIGN(axis_host_s3_out\[i], axis_host_dcpl_out\[i])\n"
			append entity "  `AXISR_ASSIGN(axis_host_dcpl_in\[i], axis_host_s3_in\[i])\n"
			append entity "end\n"
		}
		append entity "\n"
	}
	if {$cnfg(en_ddr) eq 1} {
		append entity "// ----------------------------------------------------------------------\n"
		append entity "// CARD \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "// XDMA card sync\n"
		append entity "dmaIntf rdXDMA_sync();\n"
		append entity "dmaIntf wrXDMA_sync();\n"
		append entity "\n"
		append entity "assign card_xdma_req.h2c_ctl           = {{11{1'b0}}, rdXDMA_sync.req.ctl, {2{1'b0}}, {2{rdXDMA_sync.req.ctl}}};\n"
		append entity "assign card_xdma_req.h2c_addr          = rdXDMA_sync.req.paddr;\n"
		append entity "assign card_xdma_req.h2c_len           = rdXDMA_sync.req.len;\n"
		append entity "assign card_xdma_req.h2c_valid         = rdXDMA_sync.valid;\n"
		append entity "\n"
		append entity "assign card_xdma_req.c2h_ctl           = {{11{1'b0}}, wrXDMA_sync.req.ctl, {2{1'b0}}, {2{wrXDMA_sync.req.ctl}}};\n"
		append entity "assign card_xdma_req.c2h_addr          = wrXDMA_sync.req.paddr;\n"
		append entity "assign card_xdma_req.c2h_len           = wrXDMA_sync.req.len;\n"
		append entity "assign card_xdma_req.c2h_valid         = wrXDMA_sync.valid;\n"
		append entity "\n"
		append entity "assign rdXDMA_sync.ready               = card_xdma_req.h2c_ready;\n"
		append entity "assign wrXDMA_sync.ready               = card_xdma_req.c2h_ready;\n"
		append entity "assign rdXDMA_sync.done                = card_xdma_req.h2c_status\[1];\n"
		append entity "assign wrXDMA_sync.done                = card_xdma_req.c2h_status\[1];\n"
		append entity "\n"
		append entity "// Slice card 0 \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4S axis_card_s0_in();\n"
		append entity "AXI4S axis_card_s0_out();\n"
		append entity "axis_reg_array #(.N_STAGES(N_REG_CARD_S0)) inst_card_reg_s0_out (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_card_out), .axis_out(axis_card_s0_out));\n"
		append entity "axis_reg_array #(.N_STAGES(N_REG_CARD_S0)) inst_card_reg_s0_in (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_card_s0_in), .axis_out(axis_card_in));\n"
		append entity "\n"
		append entity "// Card memory\n"
		append entity "// ----------------------------------------------------------------------\n"	
		append entity "dmaIntf rdCDMA_sync ();\n"
		append entity "dmaIntf wrCDMA_sync ();\n"
		append entity "dmaIntf rdCDMA_sync_adj \[N_DDR_CHAN] ();\n"
		append entity "dmaIntf wrCDMA_sync_adj \[N_DDR_CHAN] ();\n"
		append entity "dmaIntf rdCDMA_card ();\n"
		append entity "dmaIntf wrCDMA_card ();\n"
		append entity "dmaIntf rdCDMA_card_adj \[N_DDR_CHAN] ();\n"
		append entity "dmaIntf wrCDMA_card_adj \[N_DDR_CHAN] ();\n"
		append entity "\n"
		append entity "AXI4S #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s1_in();\n"
		append entity "AXI4S #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s1_out();\n"
		append entity "AXI4S axis_ddr_in \[N_DDR_CHAN*2] ();\n"
		append entity "AXI4S axis_ddr_out \[N_DDR_CHAN*2] ();\n"
		append entity "\n"
		if {$cnfg(n_ddr_chan) > 1} {
			append entity "axis_mux_ddr_host (.aclk(aclk), .aresetn(aresetn), .axis_in_host(axis_card_s0_out), .axis_out_host(axis_card_s0_in), .axis_in_card(axis_ddr_out\[0+:N_DDR_CHAN]), .axis_out_card(axis_ddr_in\[0+:N_DDR_CHAN]));\n"
			append entity "axis_mux_ddr_user (.aclk(aclk), .aresetn(aresetn), .axis_in_user(axis_card_s1_in), .axis_out_user(axis_card_s1_out), .axis_in_card(axis_ddr_out\[N_DDR_CHAN+:N_DDR_CHAN]), .axis_out_card(axis_ddr_in\[N_DDR_CHAN+:N_DDR_CHAN]));\n"
		} else {
			append entity "`AXIS_ASSIGN(axis_card_s0_out, axis_ddr_in\[0])\n"
			append entity "`AXIS_ASSIGN(axis_ddr_out\[0], axis_card_s0_in)\n"
			append entity "`AXIS_ASSIGN(axis_card_s1_in, axis_ddr_in\[N_DDR_CHAN])\n"
			append entity "`AXIS_ASSIGN(axis_ddr_out\[N_DDR_CHAN], axis_card_s1_out)\n"
		}
		append entity "\n"
		if {$cnfg(n_ddr_chan) > 1} {
			append entity "axis_mux_cdma (.aclk(aclk), .aresetn(aresetn), .CDMA(rdCDMA_sync), .CDMA_adj(rdCDMA_sync_adj));\n"
			append entity "axis_mux_cdma (.aclk(aclk), .aresetn(aresetn), .CDMA(wrCDMA_sync), .CDMA_adj(wrCDMA_sync_adj));\n"
			append entity "axis_mux_cdma (.aclk(aclk), .aresetn(aresetn), .CDMA(rdCDMA_card), .CDMA_adj(rdCDMA_card_adj));\n"
			append entity "axis_mux_cdma (.aclk(aclk), .aresetn(aresetn), .CDMA(wrCDMA_card), .CDMA_adj(wrCDMA_card_adj));\n"
		} else {
			append entity "`DMA_REQ_ASSIGN(rdCDMA_sync, rdCDMA_sync_adj\[0])\n"
			append entity "`DMA_REQ_ASSIGN(wrCDMA_sync, wrCDMA_sync_adj\[0])\n"
			append entity "`DMA_REQ_ASSIGN(rdCDMA_card, rdCDMA_card_adj\[0])\n"
			append entity "`DMA_REQ_ASSIGN(wrCDMA_card, wrCDMA_card_adj\[0])\n"
			
		}
		append entity "\n"
		append entity "for(genvar i = 0; i < N_DDR_CHAN; i++) begin\n"
		append entity "  // CDMA sync\n"
		append entity "  cdma inst_cdma_sync_engine (\n"
		append entity "     .aclk(aclk),\n"
		append entity "    .aresetn(aresetn),\n"
		append entity "    .rdCDMA(rdCDMA_sync_adj\[i]),\n"
		append entity "    .wrCDMA(wrCDMA_sync_adj\[i]),\n"
		append entity "    .axi_ddr_in(axi_ddr_in\[i]),\n"
		append entity "    .axis_ddr_in(axis_ddr_in\[i]),\n"
		append entity "    .axis_ddr_out(axis_ddr_out\[i])\n"
		append entity "  );\n"
		append entity "\n"
		append entity "  // CDMA user\n"
		append entity "  cdma inst_cdma_user_engine (\n"
		append entity "    .aclk(aclk),\n"
		append entity "    .aresetn(aresetn),\n"
		append entity "    .rdCDMA(rdCDMA_card_adj\[i]),\n"
		append entity "    .wrCDMA(wrCDMA_card_adj\[i]),\n"
		append entity "    .axi_ddr_in(axi_ddr_in\[N_DDR_CHAN+i]),\n"
		append entity "    .axis_ddr_in(axis_ddr_in\[N_DDR_CHAN+i]),\n"
		append entity "    .axis_ddr_out(axis_ddr_out\[N_DDR_CHAN+i])\n"
		append entity "  );\n"
		append entity "end\n"
		append entity "\n"
		append entity "// Slice card 1 \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4S #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s2_in();\n"
		append entity "AXI4S #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s2_out();\n"
		append entity "axis_reg_array #(.N_STAGES(N_REG_CARD_S1), .DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) inst_card_reg_s1_out (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_card_s1_out), .axis_out(axis_card_s2_out));\n"
		append entity "axis_reg_array #(.N_STAGES(N_REG_CARD_S1), .DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) inst_card_reg_s1_in (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_card_s2_in), .axis_out(axis_card_s1_in));\n"
		append entity "\n"
		append entity "// Multiplexing \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4S #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s3_in \[N_REGIONS] ();\n"
		append entity "AXI4S #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s3_out \[N_REGIONS] ();\n"
		if {$cnfg(n_reg) > 1} {
			append entity "muxUserIntf mux_card_rd_user ();\n"
			append entity "muxUserIntf mux_card_wr_user ();\n"
			append entity "axis_mux_user_sink #(.MUX_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) (.aclk(aclk), .aresetn(aresetn), .mux(mux_card_wr_user), .axis_in(axis_card_s3_in), .axis_out(axis_card_s2_in));\n"
			append entity "axis_mux_user_src #(.MUX_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) (.aclk(aclk), .aresetn(aresetn), .mux(mux_card_rd_user), .axis_in(axis_card_s2_out), .axis_out(axis_card_s3_out));\n"
			append entity "\n"
		} else {
			append entity "`AXIS_ASSIGN(axis_card_s2_out, axis_card_s3_out\[0])\n"
			append entity "`AXIS_ASSIGN(axis_card_s3_in\[0], axis_card_s2_in)\n"
			append entity "\n"
		}
		append entity "// Credits \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4SR #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s4_in \[N_REGIONS] ();\n"
		append entity "AXI4SR #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s4_out \[N_REGIONS] ();\n"
		append entity "logic \[N_REGIONS-1:0] rxfer_card;\n"
		append entity "logic \[N_REGIONS-1:0] wxfer_card;\n"
		append entity "logic \[N_REGIONS-1:0]\[3:0] rd_dest_card;\n"
		append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
		append entity "  data_queue_credits_src #(.DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) inst_cred_que_card_out (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_card_s3_out\[i]), .axis_out(axis_card_s4_out\[i]), .rd_dest(rd_dest_card\[i]));\n"
		append entity "  data_queue_credits_sink #(.DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) inst_cred_que_card_in (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_card_s4_in\[i]), .axis_out(axis_card_s3_in\[i]));\n"
		append entity "  assign rxfer_card\[i] = axis_card_s4_out\[i].tvalid & axis_card_s4_out\[i].tready;\n"
		append entity "  assign wxfer_card\[i] = axis_card_s4_in\[i].tvalid & axis_card_s4_in\[i].tready;\n"
		append entity "end\n"
		append entity "\n"
		append entity "// Slice card 2 \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4SR #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s5_in \[N_REGIONS] ();\n"
		append entity "AXI4SR #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_s5_out \[N_REGIONS] ();\n"
		append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
		append entity "  axisr_reg_array #(.N_STAGES(N_REG_CARD_S2), .DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) inst_card_reg_s2_out (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_card_s4_out\[i]), .axis_out(axis_card_s5_out\[i]));\n"
		append entity "  axisr_reg_array #(.N_STAGES(N_REG_CARD_S2), .DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) inst_card_reg_s2_in (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_card_s5_in\[i]), .axis_out(axis_card_s4_in\[i]));\n"
		append entity "end\n"
		append entity "\n"
		append entity "// Decoupling \n"
		append entity "// ----------------------------------------------------------------------\n"
		append entity "AXI4SR #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_dcpl_in \[N_REGIONS] ();\n"
		append entity "AXI4SR #(.AXI4S_DATA_BITS(N_DDR_CHAN*AXI_DATA_BITS)) axis_card_dcpl_out \[N_REGIONS] ();\n"
		if {$cnfg(en_pr) eq 1} {
			append entity "axisr_decoupler (.decouple(decouple), .axis_in(axis_card_s5_out), .axis_out(axis_card_dcpl_out));\n"
			append entity "axisr_decoupler (.decouple(decouple), .axis_in(axis_card_dcpl_in), .axis_out(axis_card_s5_in));\n"
		} else {
			append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
			append entity "  `AXISR_ASSIGN(axis_card_s5_out\[i], axis_card_dcpl_out\[i])\n"
			append entity "  `AXISR_ASSIGN(axis_card_dcpl_in\[i], axis_card_s5_in\[i])\n"
			append entity "end\n"
		}
		append entity "\n"
	}
	if {$cnfg(en_fv) eq 1} {
		append entity "// ----------------------------------------------------------------------\n"
		append entity "// RDMA \n"
		append entity "// ----------------------------------------------------------------------\n"
		if {$cnfg(en_fvv) eq 1} {
			append entity "metaIntf #(.DATA_BITS(FV_REQ_BITS)) rdma_req_s0_fv \[N_REGIONS] ();\n"
			append entity "metaIntf #(.DATA_BITS(FV_REQ_BITS)) rdma_req_s0_card \[N_REGIONS] ();\n"
			append entity "\n"
			append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
			append entity "  meta_reg_array #(.N_STAGES(N_REG_HOST_S0)) inst_reg_s0_rdma_fv (.aclk(aclk), .aresetn(aresetn), .meta_in(rdma_req_fv\[i]), .meta_out(rdma_req_s0_fv\[i]));\n"
			append entity "  network_req_parser #(.ID_REG(ID_DYN*N_REGIONS+i), .HOST(0)) inst_fv_parser (.aclk(aclk), .aresetn(aresetn), .req_in(rdma_req_s0_card\[i]), .req_out(rdma_req_card\[i]), .used());\n"
			append entity "end\n"
			append entity "\n"
		}
		append entity "AXI4S axis_rdma_s0_rd \[N_REGIONS] ();\n"
		append entity "AXI4S axis_rdma_s0_wr \[N_REGIONS] ();\n"
		append entity "reqIntf rdma_cmd_s0_rd \[N_REGIONS] ();\n"
		append entity "reqIntf rdma_cmd_s0_wr \[N_REGIONS] ();\n"
		append entity "\n"
		append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
		append entity "  axis_reg_array #(.N_STAGES(N_REG_HOST_S0)) inst_reg_s0_rdma_rd (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_rdma_s0_rd\[i]), .axis_out(axis_rdma_rd_data\[i]));\n"
		append entity "  axis_reg_array #(.N_STAGES(N_REG_HOST_S0)) inst_reg_s0_rdma_wr (.aclk(aclk), .aresetn(aresetn), .axis_in(axis_rdma_wr_data\[i]), .axis_out(axis_rdma_s0_wr\[i]));\n"
		append entity "  req_reg_array #(.N_STAGES(N_REG_HOST_S0)) inst_reg_s0_rdma_cmd_rd (.aclk(aclk), .aresetn(aresetn), .req_in(rdma_rd_cmd\[i]), .req_out(rdma_cmd_s0_rd\[i]));\n"
		append entity "  req_reg_array #(.N_STAGES(N_REG_HOST_S0)) inst_reg_s0_rdma_cmd_wr (.aclk(aclk), .aresetn(aresetn), .req_in(rdma_wr_cmd\[i]), .req_out(rdma_cmd_s0_wr\[i]));\n"
		append entity "end\n"
		append entity "\n"
		append entity "// Decoupling \n"
		append entity "// ----------------------------------------------------------------------\n"
		if {$cnfg(en_fv) eq 1} {
			if {$cnfg(en_fvv) eq 1} {
				append entity "metaIntf #(.DATA_BITS(FV_REQ_BITS)) rdma_req_dcpl_fv \[N_REGIONS] ();\n"
				append entity "metaIntf #(.DATA_BITS(FV_REQ_BITS)) rdma_req_dcpl_card \[N_REGIONS] (); \n"
			}
			append entity "reqIntf rdma_cmd_dcpl_rd \[N_REGIONS] ();\n"
			append entity "reqIntf rdma_cmd_dcpl_wr \[N_REGIONS] ();\n"
			append entity "AXI4S axis_rdma_dcpl_wr \[N_REGIONS] ();\n"
			append entity "AXI4S axis_rdma_dcpl_rd \[N_REGIONS] ();\n"
		}
		if {$cnfg(en_pr) eq 1} {
			if {$cnfg(en_fvv) eq 1} {
				append entity "meta_decoupler (.decouple(decouple), .meta_in(rdma_req_s0_fv), .meta_out(rdma_req_dcpl_fv);\n"
				append entity "meta_decoupler (.decouple(decouple), .meta_in(rdma_req_dcpl_card), .meta_out(rdma_req_s0_card);\n"
			}
			append entity "req_decoupler (.decouple(decouple), .req_in(rdma_cmd_s0_rd), .req_out(rdma_cmd_dcpl_rd);\n"
			append entity "req_decoupler (.decouple(decouple), .req_in(rdma_cmd_s0_wr), .req_out(rdma_cmd_dcpl_wr));\n"
			append entity "axis_decoupler (.decouple(decouple), .axis_in(axis_rdma_s0_wr), .axis_out(axis_rdma_dcpl_wr));\n"
			append entity "axis_decoupler (.decouple(decouple), .axis_in(axis_rdma_dcpl_rd), .axis_out(axis_rdma_s0_rd));\n"
		} else {
			append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
			if {$cnfg(en_fvv) eq 1} {
				append entity "  `META_ASSIGN(rdma_req_s0_fv\[i], rdma_req_dcpl_fv\[i])\n"
				append entity "  `META_ASSIGN(rdma_req_dcpl_card\[i], rdma_req_s0_card\[i])\n"
			}
			append entity "  `REQ_ASSIGN(rdma_cmd_s0_rd\[i], rdma_cmd_dcpl_rd\[i])\n"
			append entity "  `REQ_ASSIGN(rdma_cmd_s0_wr\[i], rdma_cmd_dcpl_wr\[i])\n"
			append entity "  `AXIS_ASSIGN(axis_rdma_s0_wr\[i], axis_rdma_dcpl_wr\[i])\n"
			append entity "  `AXIS_ASSIGN(axis_rdma_dcpl_rd\[i], axis_rdma_s0_rd\[i])\n"
			append entity "end\n"
		}
		append entity "\n"
	}
	append entity "// ----------------------------------------------------------------------\n"
	append entity "// Rest of decoupling \n"
	append entity "// ----------------------------------------------------------------------\n"
	append entity "AXI4L axi_ctrl_dcpl \[N_REGIONS] ();\n"
	if {$cnfg(en_bpss) eq 1} {
		append entity "reqIntf rd_req_user \[N_REGIONS] ();\n"
		append entity "reqIntf wr_req_user \[N_REGIONS] ();\n"
		append entity "reqIntf rd_req_dcpl_user \[N_REGIONS] ();\n"
		append entity "reqIntf wr_req_dcpl_user \[N_REGIONS] ();\n"
	}
	if {$cnfg(en_pr) eq 1} {
		append entity "axil_decoupler inst_dcpl_ctrl (.decouple(decouple), .axi_in(axi_ctrl_user), .axi_out(axi_ctrl_dcpl));\n"
		if {$cnfg(en_bpss) eq 1} {
			append entity "req_decoupler (.decouple(decouple), .req_in(rd_req_dcpl_user), .req_out(rd_req_user));\n"
			append entity "req_decoupler (.decouple(decouple), .req_in(wr_req_dcpl_user), .req_out(wr_req_user));\n"
		}	
	} else {
		append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
		append entity "  `AXIL_ASSIGN(axi_ctrl_user\[i], axi_ctrl_dcpl\[i])\n"
		if {$cnfg(en_bpss) eq 1} {
			append entity "  `REQ_ASSIGN(rd_req_dcpl_user\[i], rd_req_user\[i])\n"
			append entity "  `REQ_ASSIGN(wr_req_dcpl_user\[i], wr_req_user\[i])\n"
		}
		append entity "end\n"
	}
	append entity "\n"
	append entity "// ----------------------------------------------------------------------\n"
	append entity "// MMU \n"
	append entity "// ----------------------------------------------------------------------\n"
	append entity "tlb_top #(\n"
	append entity "  .ID_DYN(ID_DYN)\n"
	append entity ") inst_tlb_top (\n"
	append entity "  .aclk(aclk),\n"
	append entity "  .aresetn(aresetn),\n"
	append entity "  .axi_ctrl_lTlb(axi_ctrl_lTlb),\n"
	append entity "  .axi_ctrl_sTlb(axi_ctrl_sTlb),\n"
	if {$cnfg(en_avx) eq 1} {
		append entity "  .axim_ctrl_cnfg(axim_ctrl),\n"
	} else {
		append entity "  .axi_ctrl_cnfg(axi_ctrl_cnfg),\n"
	}
	if {$cnfg(en_bpss) eq 1} {
		append entity "  .rd_req_user(rd_req_user),\n"
		append entity "  .wr_req_user(wr_req_user),\n"
	}
	if {$cnfg(en_fv) eq 1} {
		append entity "  .rdma_req(rdma_req_host),\n"
	}
	if {$cnfg(en_strm) eq 1} {
		append entity "  .rdXDMA_host(rdXDMA_host),\n"
		append entity "  .wrXDMA_host(wrXDMA_host),\n"
		append entity "  .rxfer_host(rxfer_host),\n"
		append entity "  .wxfer_host(wxfer_host),\n"
		if {$cnfg(n_reg) > 1} {
			append entity "  .mux_host_rd_user(mux_host_rd_user),\n"
			append entity "  .mux_host_wr_user(mux_host_wr_user),\n"
		}
		append entity "  .rd_dest_host(rd_dest_host),\n"
	}
	if {$cnfg(en_ddr) eq 1} {
		append entity "  .rdXDMA_sync(rdXDMA_sync),\n"
		append entity "  .wrXDMA_sync(wrXDMA_sync),\n"
		append entity "  .rdCDMA_sync(rdCDMA_sync),\n"
		append entity "  .wrCDMA_sync(wrCDMA_sync),\n"
		append entity "  .rdCDMA_card(rdCDMA_card),\n"
		append entity "  .wrCDMA_card(wrCDMA_card),\n"
		append entity "  .rxfer_card(rxfer_card),\n"
		append entity "  .wxfer_card(wxfer_card),\n"
		if {$cnfg(n_reg) > 1} {
			append entity "  .mux_card_rd_user(mux_card_rd_user),\n"
			append entity "  .mux_card_wr_user(mux_card_wr_user),\n"
		}
		append entity "  .rd_dest_card(rd_dest_card),\n"
	}
	append entity "  .decouple(decouple),\n"
	append entity "  .pf_irq(usr_irq)\n"
	append entity ");\n"
	append entity "\n"
	append entity "// ----------------------------------------------------------------------\n"
	append entity "// USER \n"
	append entity "// ----------------------------------------------------------------------\n"
	for {set i 0}  {$i < $cnfg(n_reg)} {incr i} {
		append entity "// User logic wrappers \n"
		append entity "design_user_wrapper_$i inst_user_wrapper_$i (\n" 
		append entity "  .axi_ctrl_araddr      (axi_ctrl_dcpl\[$i].araddr),\n"
		append entity "  .axi_ctrl_arprot      (axi_ctrl_dcpl\[$i].arprot),\n"
		append entity "  .axi_ctrl_arready     (axi_ctrl_dcpl\[$i].arready),\n"
		append entity "  .axi_ctrl_arvalid     (axi_ctrl_dcpl\[$i].arvalid),\n"
		append entity "  .axi_ctrl_awaddr      (axi_ctrl_dcpl\[$i].awaddr),\n"
		append entity "  .axi_ctrl_awprot      (axi_ctrl_dcpl\[$i].awprot),\n"
		append entity "  .axi_ctrl_awready     (axi_ctrl_dcpl\[$i].awready),\n"
		append entity "  .axi_ctrl_awvalid     (axi_ctrl_dcpl\[$i].awvalid),\n"
		append entity "  .axi_ctrl_bready      (axi_ctrl_dcpl\[$i].bready),\n"
		append entity "  .axi_ctrl_bresp       (axi_ctrl_dcpl\[$i].bresp),\n"
		append entity "  .axi_ctrl_bvalid      (axi_ctrl_dcpl\[$i].bvalid),\n"
		append entity "  .axi_ctrl_rdata       (axi_ctrl_dcpl\[$i].rdata),\n"
		append entity "  .axi_ctrl_rready      (axi_ctrl_dcpl\[$i].rready),\n"
		append entity "  .axi_ctrl_rresp       (axi_ctrl_dcpl\[$i].rresp),\n"
		append entity "  .axi_ctrl_rvalid      (axi_ctrl_dcpl\[$i].rvalid),\n"
		append entity "  .axi_ctrl_wdata       (axi_ctrl_dcpl\[$i].wdata),\n"
		append entity "  .axi_ctrl_wready      (axi_ctrl_dcpl\[$i].wready),\n"
		append entity "  .axi_ctrl_wstrb       (axi_ctrl_dcpl\[$i].wstrb),\n"
		append entity "  .axi_ctrl_wvalid      (axi_ctrl_dcpl\[$i].wvalid),\n"
		if {$cnfg(en_bpss) eq 1} {
			append entity "  .rd_req_user_valid	   (rd_req_dcpl_user\[$i].valid),\n"
			append entity "  .rd_req_user_ready	   (rd_req_dcpl_user\[$i].ready),\n"
			append entity "  .rd_req_user_req		   (rd_req_dcpl_user\[$i].req),\n"
			append entity "  .wr_req_user_valid	   (wr_req_dcpl_user\[$i].valid),\n"
			append entity "  .wr_req_user_ready	   (wr_req_dcpl_user\[$i].ready),\n"
			append entity "  .wr_req_user_req		   (wr_req_dcpl_user\[$i].req),\n"
		}
		if {$cnfg(en_fv) eq 1} {
			if {$cnfg(en_fvv) eq 1} {
				append entity "  .fv_req_valid		   	(rdma_req_dcpl_fv\[$i].valid),\n"
				append entity "  .fv_req_ready	   		(rdma_req_dcpl_fv\[$i].ready),\n"
				append entity "  .fv_req_data	   		(rdma_req_dcpl_fv\[$i].data),\n"
				append entity "  .fv_cmd_valid		   	(rdma_req_dcpl_card\[$i].valid),\n"
				append entity "  .fv_cmd_ready	   		(rdma_req_dcpl_card\[$i].ready),\n"
				append entity "  .fv_cmd_data	   		(rdma_req_dcpl_card\[$i].data),\n"
			}
			append entity "  .rd_req_rdma_valid	   (rdma_cmd_dcpl_rd\[$i].valid),\n"
			append entity "  .rd_req_rdma_ready	   (rdma_cmd_dcpl_rd\[$i].ready),\n"
			append entity "  .rd_req_rdma_req	   (rdma_cmd_dcpl_rd\[$i].req),\n"
			append entity "  .wr_req_rdma_valid	   (rdma_cmd_dcpl_wr\[$i].valid),\n"
			append entity "  .wr_req_rdma_ready	   (rdma_cmd_dcpl_wr\[$i].ready),\n"
			append entity "  .wr_req_rdma_req	   (rdma_cmd_dcpl_wr\[$i].req),\n"
			append entity "  .axis_rdma_src_tdata  (axis_rdma_dcpl_rd\[$i].tdata),\n"
			append entity "  .axis_rdma_src_tkeep  (axis_rdma_dcpl_rd\[$i].tkeep),\n"
			append entity "  .axis_rdma_src_tlast  (axis_rdma_dcpl_rd\[$i].tlast),\n"
			append entity "  .axis_rdma_src_tready (axis_rdma_dcpl_rd\[$i].tready),\n"
			append entity "  .axis_rdma_src_tvalid (axis_rdma_dcpl_rd\[$i].tvalid),\n"
			append entity "  .axis_rdma_sink_tdata (axis_rdma_dcpl_wr\[$i].tdata),\n"
			append entity "  .axis_rdma_sink_tkeep (axis_rdma_dcpl_wr\[$i].tkeep),\n"
			append entity "  .axis_rdma_sink_tlast (axis_rdma_dcpl_wr\[$i].tlast),\n"
			append entity "  .axis_rdma_sink_tready(axis_rdma_dcpl_wr\[$i].tready),\n"
			append entity "  .axis_rdma_sink_tvalid(axis_rdma_dcpl_wr\[$i].tvalid),\n"
		}
		if {$cnfg(en_strm) eq 1} {
			append entity "  .axis_host_src_tdata       (axis_host_dcpl_in\[$i].tdata),\n"
			append entity "  .axis_host_src_tkeep       (axis_host_dcpl_in\[$i].tkeep),\n"
			append entity "  .axis_host_src_tlast       (axis_host_dcpl_in\[$i].tlast),\n"
			append entity "  .axis_host_src_tdest       (axis_host_dcpl_in\[$i].tdest),\n"
			append entity "  .axis_host_src_tready      (axis_host_dcpl_in\[$i].tready),\n"
			append entity "  .axis_host_src_tvalid      (axis_host_dcpl_in\[$i].tvalid),\n"
			append entity "  .axis_host_sink_tdata      (axis_host_dcpl_out\[$i].tdata),\n"
			append entity "  .axis_host_sink_tkeep      (axis_host_dcpl_out\[$i].tkeep),\n"
			append entity "  .axis_host_sink_tlast      (axis_host_dcpl_out\[$i].tlast),\n"
			append entity "  .axis_host_sink_tdest      (axis_host_dcpl_out\[$i].tdest),\n"
			append entity "  .axis_host_sink_tready     (axis_host_dcpl_out\[$i].tready),\n"
			append entity "  .axis_host_sink_tvalid     (axis_host_dcpl_out\[$i].tvalid),\n"
		}
		if {$cnfg(en_ddr) eq 1} {
			append entity "  .axis_card_src_tdata       (axis_card_dcpl_in\[$i].tdata),\n"
			append entity "  .axis_card_src_tkeep       (axis_card_dcpl_in\[$i].tkeep),\n"
			append entity "  .axis_card_src_tlast       (axis_card_dcpl_in\[$i].tlast),\n"
			append entity "  .axis_card_src_tdest       (axis_card_dcpl_in\[$i].tdest),\n"
			append entity "  .axis_card_src_tready      (axis_card_dcpl_in\[$i].tready),\n"
			append entity "  .axis_card_src_tvalid      (axis_card_dcpl_in\[$i].tvalid),\n"
			append entity "  .axis_card_sink_tdata      (axis_card_dcpl_out\[$i].tdata),\n"
			append entity "  .axis_card_sink_tkeep      (axis_card_dcpl_out\[$i].tkeep),\n"
			append entity "  .axis_card_sink_tlast      (axis_card_dcpl_out\[$i].tlast),\n"
			append entity "  .axis_card_sink_tdest      (axis_card_dcpl_out\[$i].tdest),\n"
			append entity "  .axis_card_sink_tready     (axis_card_dcpl_out\[$i].tready),\n"
			append entity "  .axis_card_sink_tvalid     (axis_card_dcpl_out\[$i].tvalid),\n"
		}
		append entity "  .aclk                 (aclk),\n"
		append entity "  .aresetn              (aresetn)\n"
		append entity ");\n"
		append entity "\n"
	}
    append entity "// ----------------------------------------------------------------------\n"
	append entity "// Control crossbar - move to new file maybe \n"
	append entity "// ----------------------------------------------------------------------\n"
	if {$cnfg(en_avx) eq 1} {
		append entity "// Crossbar out\n"
		append entity "logic\[N_REGIONS-1:0]\[3*AXI_ADDR_BITS-1:0]                  axi_xbar_araddr;\n"
		append entity "logic\[N_REGIONS-1:0]\[8:0]                                 axi_xbar_arprot;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_arready;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_arvalid;\n"
		append entity "logic\[N_REGIONS-1:0]\[3*AXI_ADDR_BITS-1:0]                  axi_xbar_awaddr;\n"
		append entity "logic\[N_REGIONS-1:0]\[8:0]                                 axi_xbar_awprot;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_awready;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_awvalid;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_bready;\n"
		append entity "logic\[N_REGIONS-1:0]\[5:0]                                  axi_xbar_bresp;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_bvalid;\n"
		append entity "logic\[N_REGIONS-1:0]\[3*AXIL_DATA_BITS-1:0]                 axi_xbar_rdata;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_rready;\n"
		append entity "logic\[N_REGIONS-1:0]\[5:0]                                  axi_xbar_rresp;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_rvalid;\n"
		append entity "logic\[N_REGIONS-1:0]\[3*AXIL_DATA_BITS-1:0]                 axi_xbar_wdata;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_wready;\n"
		append entity "logic\[N_REGIONS-1:0]\[3*(AXIL_DATA_BITS/8)-1:0]             axi_xbar_wstrb;\n"
		append entity "logic\[N_REGIONS-1:0]\[2:0]                                  axi_xbar_wvalid;\n"
		append entity "\n"
		append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
		append entity "\n"
		append entity "// lTlb\n"
		append entity "assign axi_ctrl_lTlb\[i].araddr               = axi_xbar_araddr\[i]\[AXI_ADDR_BITS-1:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].arprot               = axi_xbar_arprot\[i]\[2:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].arvalid              = axi_xbar_arvalid\[i]\[0];\n"
		append entity "assign axi_ctrl_lTlb\[i].awaddr               = axi_xbar_awaddr\[i]\[AXI_ADDR_BITS-1:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].awprot               = axi_xbar_awprot\[i]\[2:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].awvalid              = axi_xbar_awvalid\[i]\[0];\n"
		append entity "assign axi_ctrl_lTlb\[i].bready               = axi_xbar_bready\[i]\[0];\n"
		append entity "assign axi_ctrl_lTlb\[i].rready               = axi_xbar_rready\[i]\[0];\n"
		append entity "assign axi_ctrl_lTlb\[i].wdata                = axi_xbar_wdata\[i]\[AXIL_DATA_BITS-1:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].wstrb                = axi_xbar_wstrb\[i]\[(AXIL_DATA_BITS/8)-1:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].wvalid               = axi_xbar_wvalid\[i]\[0];\n"
		append entity "\n"
		append entity "assign axi_xbar_arready\[i]\[0]                = axi_ctrl_lTlb\[i].arready;\n"
		append entity "assign axi_xbar_awready\[i]\[0]                = axi_ctrl_lTlb\[i].awready;\n"
		append entity "assign axi_xbar_bresp\[i]\[1:0]                = axi_ctrl_lTlb\[i].bresp;\n"
		append entity "assign axi_xbar_bvalid\[i]\[0]                 = axi_ctrl_lTlb\[i].bvalid;\n"
		append entity "assign axi_xbar_rdata\[i]\[AXIL_DATA_BITS-1:0] = axi_ctrl_lTlb\[i].rdata;\n"
		append entity "assign axi_xbar_rresp\[i]\[1:0]                = axi_ctrl_lTlb\[i].rresp;\n"
		append entity "assign axi_xbar_rvalid\[i]\[0]                 = axi_ctrl_lTlb\[i].rvalid;\n"
		append entity "assign axi_xbar_wready\[i]\[0]                 = axi_ctrl_lTlb\[i].wready;\n"
		append entity "\n"
		append entity "// sTlb\n"
		append entity "assign axi_ctrl_sTlb\[i].araddr               = axi_xbar_araddr\[i]\[2*AXI_ADDR_BITS-1:AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_sTlb\[i].arprot               = axi_xbar_arprot\[i]\[5:3];\n"
		append entity "assign axi_ctrl_sTlb\[i].arvalid              = axi_xbar_arvalid\[i]\[1];\n"
		append entity "assign axi_ctrl_sTlb\[i].awaddr               = axi_xbar_awaddr\[i]\[2*AXI_ADDR_BITS-1:AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_sTlb\[i].awprot               = axi_xbar_awprot\[i]\[5:3];\n"
		append entity "assign axi_ctrl_sTlb\[i].awvalid              = axi_xbar_awvalid\[i]\[1];\n"
		append entity "assign axi_ctrl_sTlb\[i].bready               = axi_xbar_bready\[i]\[1];\n"
		append entity "assign axi_ctrl_sTlb\[i].rready               = axi_xbar_rready\[i]\[1];\n"
		append entity "assign axi_ctrl_sTlb\[i].wdata                = axi_xbar_wdata\[i]\[2*AXIL_DATA_BITS-1:AXIL_DATA_BITS];\n"
		append entity "assign axi_ctrl_sTlb\[i].wstrb                = axi_xbar_wstrb\[i]\[2*(AXIL_DATA_BITS/8)-1:AXIL_DATA_BITS/8];\n"
		append entity "assign axi_ctrl_sTlb\[i].wvalid               = axi_xbar_wvalid\[i]\[1];\n"
		append entity "\n"
		append entity "assign axi_xbar_arready\[i]\[1]                = axi_ctrl_sTlb\[i].arready;\n"
		append entity "assign axi_xbar_awready\[i]\[1]                = axi_ctrl_sTlb\[i].awready;\n"
		append entity "assign axi_xbar_bresp\[i]\[3:2]                = axi_ctrl_sTlb\[i].bresp;\n"
		append entity "assign axi_xbar_bvalid\[i]\[1]                 = axi_ctrl_sTlb\[i].bvalid;\n"
		append entity "assign axi_xbar_rdata\[i]\[2*AXIL_DATA_BITS-1:AXIL_DATA_BITS] = axi_ctrl_sTlb\[i].rdata;\n"
		append entity "assign axi_xbar_rresp\[i]\[3:2]                = axi_ctrl_sTlb\[i].rresp;\n"
		append entity "assign axi_xbar_rvalid\[i]\[1]                 = axi_ctrl_sTlb\[i].rvalid;\n"
		append entity "assign axi_xbar_wready\[i]\[1]                 = axi_ctrl_sTlb\[i].wready;\n"
		append entity "\n"
		append entity "// User logic\n"
		append entity "assign axi_ctrl_user\[i].araddr               = axi_xbar_araddr\[i]\[3*AXI_ADDR_BITS-1:2*AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_user\[i].arprot               = axi_xbar_arprot\[i]\[8:6];\n"
		append entity "assign axi_ctrl_user\[i].arvalid              = axi_xbar_arvalid\[i]\[2];\n"
		append entity "assign axi_ctrl_user\[i].awaddr               = axi_xbar_awaddr\[i]\[3*AXI_ADDR_BITS-1:2*AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_user\[i].awprot               = axi_xbar_awprot\[i]\[8:6];\n"
		append entity "assign axi_ctrl_user\[i].awvalid              = axi_xbar_awvalid\[i]\[2];\n"
		append entity "assign axi_ctrl_user\[i].bready               = axi_xbar_bready\[i]\[2];\n"
		append entity "assign axi_ctrl_user\[i].rready               = axi_xbar_rready\[i]\[2];\n"
		append entity "assign axi_ctrl_user\[i].wdata                = axi_xbar_wdata\[i]\[3*AXIL_DATA_BITS-1:2*AXIL_DATA_BITS];\n"
		append entity "assign axi_ctrl_user\[i].wstrb                = axi_xbar_wstrb\[i]\[3*(AXIL_DATA_BITS/8)-1:2*(AXIL_DATA_BITS/8)];\n"
		append entity "assign axi_ctrl_user\[i].wvalid               = axi_xbar_wvalid\[i]\[2];\n"
		append entity "\n"
		append entity "assign axi_xbar_arready\[i]\[2]                = axi_ctrl_user\[i].arready;\n"
		append entity "assign axi_xbar_awready\[i]\[2]                = axi_ctrl_user\[i].awready;\n"
		append entity "assign axi_xbar_bresp\[i]\[5:4]                = axi_ctrl_user\[i].bresp;\n"
		append entity "assign axi_xbar_bvalid\[i]\[2]                 = axi_ctrl_user\[i].bvalid;\n"
		append entity "assign axi_xbar_rdata\[i]\[3*AXIL_DATA_BITS-1:2*AXIL_DATA_BITS] = axi_ctrl_user\[i].rdata;\n"
		append entity "assign axi_xbar_rresp\[i]\[5:4]                = axi_ctrl_user\[i].rresp;\n"
		append entity "assign axi_xbar_rvalid\[i]\[2]                 = axi_ctrl_user\[i].rvalid;\n"
		append entity "assign axi_xbar_wready\[i]\[2]                 = axi_ctrl_user\[i].wready;\n"
		append entity "\n"
		append entity "end\n"
		append entity "\n"
	} else {
		append entity "// Crossbar out\n"
		append entity "logic\[N_REGIONS-1:0]\[4*AXI_ADDR_BITS-1:0]                  axi_xbar_araddr;\n"
		append entity "logic\[N_REGIONS-1:0]\[11:0]                                 axi_xbar_arprot;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_arready;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_arvalid;\n"
		append entity "logic\[N_REGIONS-1:0]\[4*AXI_ADDR_BITS-1:0]                  axi_xbar_awaddr;\n"
		append entity "logic\[N_REGIONS-1:0]\[11:0]                                 axi_xbar_awprot;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_awready;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_awvalid;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_bready;\n"
		append entity "logic\[N_REGIONS-1:0]\[7:0]                                  axi_xbar_bresp;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_bvalid;\n"
		append entity "logic\[N_REGIONS-1:0]\[4*AXIL_DATA_BITS-1:0]                 axi_xbar_rdata;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_rready;\n"
		append entity "logic\[N_REGIONS-1:0]\[7:0]                                  axi_xbar_rresp;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_rvalid;\n"
		append entity "logic\[N_REGIONS-1:0]\[4*AXIL_DATA_BITS-1:0]                 axi_xbar_wdata;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_wready;\n"
		append entity "logic\[N_REGIONS-1:0]\[4*(AXIL_DATA_BITS/8)-1:0]             axi_xbar_wstrb;\n"
		append entity "logic\[N_REGIONS-1:0]\[3:0]                                  axi_xbar_wvalid;\n"
		append entity "\n"
		append entity "for(genvar i = 0; i < N_REGIONS; i++) begin\n"
		append entity "\n"
		append entity "// lTlb\n"
		append entity "assign axi_ctrl_lTlb\[i].araddr               = axi_xbar_araddr\[i]\[AXI_ADDR_BITS-1:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].arprot               = axi_xbar_arprot\[i]\[2:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].arvalid              = axi_xbar_arvalid\[i]\[0];\n"
		append entity "assign axi_ctrl_lTlb\[i].awaddr               = axi_xbar_awaddr\[i]\[AXI_ADDR_BITS-1:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].awprot               = axi_xbar_awprot\[i]\[2:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].awvalid              = axi_xbar_awvalid\[i]\[0];\n"
		append entity "assign axi_ctrl_lTlb\[i].bready               = axi_xbar_bready\[i]\[0];\n"
		append entity "assign axi_ctrl_lTlb\[i].rready               = axi_xbar_rready\[i]\[0];\n"
		append entity "assign axi_ctrl_lTlb\[i].wdata                = axi_xbar_wdata\[i]\[AXIL_DATA_BITS-1:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].wstrb                = axi_xbar_wstrb\[i]\[(AXIL_DATA_BITS/8)-1:0];\n"
		append entity "assign axi_ctrl_lTlb\[i].wvalid               = axi_xbar_wvalid\[i]\[0];\n"
		append entity "\n"
		append entity "assign axi_xbar_arready\[i]\[0]                = axi_ctrl_lTlb\[i].arready;\n"
		append entity "assign axi_xbar_awready\[i]\[0]                = axi_ctrl_lTlb\[i].awready;\n"
		append entity "assign axi_xbar_bresp\[i]\[1:0]                = axi_ctrl_lTlb\[i].bresp;\n"
		append entity "assign axi_xbar_bvalid\[i]\[0]                 = axi_ctrl_lTlb\[i].bvalid;\n"
		append entity "assign axi_xbar_rdata\[i]\[AXIL_DATA_BITS-1:0] = axi_ctrl_lTlb\[i].rdata;\n"
		append entity "assign axi_xbar_rresp\[i]\[1:0]                = axi_ctrl_lTlb\[i].rresp;\n"
		append entity "assign axi_xbar_rvalid\[i]\[0]                 = axi_ctrl_lTlb\[i].rvalid;\n"
		append entity "assign axi_xbar_wready\[i]\[0]                 = axi_ctrl_lTlb\[i].wready;\n"
		append entity "\n"
		append entity "// sTlb\n"
		append entity "assign axi_ctrl_sTlb\[i].araddr               = axi_xbar_araddr\[i]\[2*AXI_ADDR_BITS-1:AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_sTlb\[i].arprot               = axi_xbar_arprot\[i]\[5:3];\n"
		append entity "assign axi_ctrl_sTlb\[i].arvalid              = axi_xbar_arvalid\[i]\[1];\n"
		append entity "assign axi_ctrl_sTlb\[i].awaddr               = axi_xbar_awaddr\[i]\[2*AXI_ADDR_BITS-1:AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_sTlb\[i].awprot               = axi_xbar_awprot\[i]\[5:3];\n"
		append entity "assign axi_ctrl_sTlb\[i].awvalid              = axi_xbar_awvalid\[i]\[1];\n"
		append entity "assign axi_ctrl_sTlb\[i].bready               = axi_xbar_bready\[i]\[1];\n"
		append entity "assign axi_ctrl_sTlb\[i].rready               = axi_xbar_rready\[i]\[1];\n"
		append entity "assign axi_ctrl_sTlb\[i].wdata                = axi_xbar_wdata\[i]\[2*AXIL_DATA_BITS-1:AXIL_DATA_BITS];\n"
		append entity "assign axi_ctrl_sTlb\[i].wstrb                = axi_xbar_wstrb\[i]\[2*(AXIL_DATA_BITS/8)-1:AXIL_DATA_BITS/8];\n"
		append entity "assign axi_ctrl_sTlb\[i].wvalid               = axi_xbar_wvalid\[i]\[1];\n"
		append entity "\n"
		append entity "assign axi_xbar_arready\[i]\[1]                = axi_ctrl_sTlb\[i].arready;\n"
		append entity "assign axi_xbar_awready\[i]\[1]                = axi_ctrl_sTlb\[i].awready;\n"
		append entity "assign axi_xbar_bresp\[i]\[3:2]                = axi_ctrl_sTlb\[i].bresp;\n"
		append entity "assign axi_xbar_bvalid\[i]\[1]                 = axi_ctrl_sTlb\[i].bvalid;\n"
		append entity "assign axi_xbar_rdata\[i]\[2*AXIL_DATA_BITS-1:AXIL_DATA_BITS] = axi_ctrl_sTlb\[i].rdata;\n"
		append entity "assign axi_xbar_rresp\[i]\[3:2]                = axi_ctrl_sTlb\[i].rresp;\n"
		append entity "assign axi_xbar_rvalid\[i]\[1]                 = axi_ctrl_sTlb\[i].rvalid;\n"
		append entity "assign axi_xbar_wready\[i]\[1]                 = axi_ctrl_sTlb\[i].wready;\n"
		append entity "\n"
		append entity "// User logic\n"
		append entity "assign axi_ctrl_user\[i].araddr               = axi_xbar_araddr\[i]\[3*AXI_ADDR_BITS-1:2*AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_user\[i].arprot               = axi_xbar_arprot\[i]\[8:6];\n"
		append entity "assign axi_ctrl_user\[i].arvalid              = axi_xbar_arvalid\[i]\[2];\n"
		append entity "assign axi_ctrl_user\[i].awaddr               = axi_xbar_awaddr\[i]\[3*AXI_ADDR_BITS-1:2*AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_user\[i].awprot               = axi_xbar_awprot\[i]\[8:6];\n"
		append entity "assign axi_ctrl_user\[i].awvalid              = axi_xbar_awvalid\[i]\[2];\n"
		append entity "assign axi_ctrl_user\[i].bready               = axi_xbar_bready\[i]\[2];\n"
		append entity "assign axi_ctrl_user\[i].rready               = axi_xbar_rready\[i]\[2];\n"
		append entity "assign axi_ctrl_user\[i].wdata                = axi_xbar_wdata\[i]\[3*AXIL_DATA_BITS-1:2*AXIL_DATA_BITS];\n"
		append entity "assign axi_ctrl_user\[i].wstrb                = axi_xbar_wstrb\[i]\[3*(AXIL_DATA_BITS/8)-1:2*(AXIL_DATA_BITS/8)];\n"
		append entity "assign axi_ctrl_user\[i].wvalid               = axi_xbar_wvalid\[i]\[2];\n"
		append entity "\n"
		append entity "assign axi_xbar_arready\[i]\[2]                = axi_ctrl_user\[i].arready;\n"
		append entity "assign axi_xbar_awready\[i]\[2]                = axi_ctrl_user\[i].awready;\n"
		append entity "assign axi_xbar_bresp\[i]\[5:4]                = axi_ctrl_user\[i].bresp;\n"
		append entity "assign axi_xbar_bvalid\[i]\[2]                 = axi_ctrl_user\[i].bvalid;\n"
		append entity "assign axi_xbar_rdata\[i]\[3*AXIL_DATA_BITS-1:2*AXIL_DATA_BITS] = axi_ctrl_user\[i].rdata;\n"
		append entity "assign axi_xbar_rresp\[i]\[5:4]                = axi_ctrl_user\[i].rresp;\n"
		append entity "assign axi_xbar_rvalid\[i]\[2]                 = axi_ctrl_user\[i].rvalid;\n"
		append entity "assign axi_xbar_wready\[i]\[2]                 = axi_ctrl_user\[i].wready;\n"
		append entity "\n"
		append entity "// Config\n"
		append entity "assign axi_ctrl_cnfg\[i].araddr                 = axi_xbar_araddr\[i]\[4*AXI_ADDR_BITS-1:3*AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_cnfg\[i].arprot                 = axi_xbar_arprot\[i]\[11:9];\n"
		append entity "assign axi_ctrl_cnfg\[i].arvalid                = axi_xbar_arvalid\[i]\[3];\n"
		append entity "assign axi_ctrl_cnfg\[i].awaddr                 = axi_xbar_awaddr\[i]\[4*AXI_ADDR_BITS-1:3*AXI_ADDR_BITS];\n"
		append entity "assign axi_ctrl_cnfg\[i].awprot                 = axi_xbar_awprot\[i]\[11:9];\n"
		append entity "assign axi_ctrl_cnfg\[i].awvalid                = axi_xbar_awvalid\[i]\[3];\n"
		append entity "assign axi_ctrl_cnfg\[i].bready                 = axi_xbar_bready\[i]\[3];\n"
		append entity "assign axi_ctrl_cnfg\[i].rready                 = axi_xbar_rready\[i]\[3];\n"
		append entity "assign axi_ctrl_cnfg\[i].wdata                  = axi_xbar_wdata\[i]\[4*AXIL_DATA_BITS-1:3*AXIL_DATA_BITS];\n"
		append entity "assign axi_ctrl_cnfg\[i].wstrb                  = axi_xbar_wstrb\[i]\[4*(AXIL_DATA_BITS/8)-1:3*(AXIL_DATA_BITS/8)];\n"
		append entity "assign axi_ctrl_cnfg\[i].wvalid                 = axi_xbar_wvalid\[i]\[3];\n"
		append entity "\n"
		append entity "assign axi_xbar_arready\[i]\[3]                = axi_ctrl_cnfg\[i].arready;\n"
		append entity "assign axi_xbar_awready\[i]\[3]                = axi_ctrl_cnfg\[i].awready;\n"
		append entity "assign axi_xbar_bresp\[i]\[7:6]                = axi_ctrl_cnfg\[i].bresp;\n"
		append entity "assign axi_xbar_bvalid\[i]\[3]                 = axi_ctrl_cnfg\[i].bvalid;\n"
		append entity "assign axi_xbar_rdata\[i]\[4*AXIL_DATA_BITS-1:3*AXIL_DATA_BITS] = axi_ctrl_cnfg\[i].rdata;\n"
		append entity "assign axi_xbar_rresp\[i]\[7:6]                = axi_ctrl_cnfg\[i].rresp;\n"
		append entity "assign axi_xbar_rvalid\[i]\[3]                 = axi_ctrl_cnfg\[i].rvalid;\n"
		append entity "assign axi_xbar_wready\[i]\[3]                 = axi_ctrl_cnfg\[i].wready;\n"
		append entity "\n"
		append entity "end\n"
		append entity "\n"
	}
	for {set i 0}  {$i < $cnfg(n_reg)} {incr i} {
		append entity "dyn_crossbar_$i inst_dyn_crossbar_$i (\n"
		append entity "  .aclk(aclk),                    \n"
		append entity "  .aresetn(aresetn),             \n"
		append entity "  .s_axi_awaddr(axi_ctrl\[$i].awaddr),    \n"
		append entity "  .s_axi_awprot(axi_ctrl\[$i].awprot),    \n"
		append entity "  .s_axi_awvalid(axi_ctrl\[$i].awvalid),  \n"
		append entity "  .s_axi_awready(axi_ctrl\[$i].awready),  \n"
		append entity "  .s_axi_wdata(axi_ctrl\[$i].wdata),      \n"
		append entity "  .s_axi_wstrb(axi_ctrl\[$i].wstrb),      \n"
		append entity "  .s_axi_wvalid(axi_ctrl\[$i].wvalid),    \n"
		append entity "  .s_axi_wready(axi_ctrl\[$i].wready),    \n"
		append entity "  .s_axi_bresp(axi_ctrl\[$i].bresp),      \n"
		append entity "  .s_axi_bvalid(axi_ctrl\[$i].bvalid),    \n"
		append entity "  .s_axi_bready(axi_ctrl\[$i].bready),    \n"
		append entity "  .s_axi_araddr(axi_ctrl\[$i].araddr),    \n"
		append entity "  .s_axi_arprot(axi_ctrl\[$i].arprot),    \n"
		append entity "  .s_axi_arvalid(axi_ctrl\[$i].arvalid),  \n"
		append entity "  .s_axi_arready(axi_ctrl\[$i].arready),  \n"
		append entity "  .s_axi_rdata(axi_ctrl\[$i].rdata),      \n"
		append entity "  .s_axi_rresp(axi_ctrl\[$i].rresp),      \n"
		append entity "  .s_axi_rvalid(axi_ctrl\[$i].rvalid),    \n"
		append entity "  .s_axi_rready(axi_ctrl\[$i].rready),    \n"
		append entity "  .m_axi_awaddr(axi_xbar_awaddr\[$i]),    \n"
		append entity "  .m_axi_awprot(axi_xbar_awprot\[$i]),    \n"
		append entity "  .m_axi_awvalid(axi_xbar_awvalid\[$i]),  \n"
		append entity "  .m_axi_awready(axi_xbar_awready\[$i]),  \n"
		append entity "  .m_axi_wdata(axi_xbar_wdata\[$i]),      \n"
		append entity "  .m_axi_wstrb(axi_xbar_wstrb\[$i]),      \n"
		append entity "  .m_axi_wvalid(axi_xbar_wvalid\[$i]),    \n"
		append entity "  .m_axi_wready(axi_xbar_wready\[$i]),    \n"
		append entity "  .m_axi_bresp(axi_xbar_bresp\[$i]),      \n"
		append entity "  .m_axi_bvalid(axi_xbar_bvalid\[$i]),    \n"
		append entity "  .m_axi_bready(axi_xbar_bready\[$i]),    \n"
		append entity "  .m_axi_araddr(axi_xbar_araddr\[$i]),    \n"
		append entity "  .m_axi_arprot(axi_xbar_arprot\[$i]),    \n"
		append entity "  .m_axi_arvalid(axi_xbar_arvalid\[$i]),  \n"
		append entity "  .m_axi_arready(axi_xbar_arready\[$i]),  \n"
		append entity "  .m_axi_rdata(axi_xbar_rdata\[$i]),      \n"
		append entity "  .m_axi_rresp(axi_xbar_rresp\[$i]),      \n"
		append entity "  .m_axi_rvalid(axi_xbar_rvalid\[$i]),    \n"
		append entity "  .m_axi_rready(axi_xbar_rready\[$i])\n"
		append entity ");\n\n"
	}
	append entity "\n"
	append entity "endmodule\n"
	append entity "\n"
	lappend template $entity
	set vho_file [open $f_out w]
	foreach line $template {
	    puts $vho_file $line
	}
	close $vho_file
}